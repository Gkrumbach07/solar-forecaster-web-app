{"ast":null,"code":"var _jsxFileName = \"/Users/gagekrumbach/Documents/TEST/client/src/App.js\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport { Map, TileLayer, Marker } from \"react-leaflet\";\nimport CanvasJSReact from './canvasjs.react';\nconst CanvasJS = CanvasJSReact.CanvasJS;\nconst CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nrequire('dotenv').config();\n\nfunction Forecast(props) {\n  const days = props.forecast.map(day => /*#__PURE__*/React.createElement(\"tr\", {\n    key: day['observation_time'].value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, day['observation_time'].value), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, ((day['temp'][0]['min'].value + day['temp'][1]['max'].value) / 2).toFixed(1)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, day['weather_code'].value)));\n  return /*#__PURE__*/React.createElement(\"table\", {\n    id: \"forecastTable\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 19\n    }\n  }, \"Day\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 19\n    }\n  }, \"Temperature\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 19\n    }\n  }, \"Forecast\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, days));\n}\n\nfunction MapContainer(props) {\n  const marker = props.marker.hasLocation ? /*#__PURE__*/React.createElement(Marker, {\n    position: props.marker.latlng,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(Map, {\n    center: [34, -108],\n    zoom: 6,\n    onClick: props.onClick,\n    className: \"leaflet-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), marker);\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      this.setState({\n        'marker': {\n          hasLocation: true,\n          latlng: e.latlng\n        }\n      }); // get weather forecast\n\n      fetch(\"https://api.climacell.co/v3/weather/forecast/daily?lat=\" + e.latlng.lat + \"&lon=\" + e.latlng.lng + \"&unit_system=us&start_time=now&fields=precipitation%2Cprecipitation_accumulation%2Ctemp%2Cwind_speed%2Cbaro_pressure%2Cvisibility%2Chumidity%2Cweather_code&apikey=\" + process.env.REACT_APP_API_KEY).then(res => res.json()).then(result => {\n        // set forecast state\n        this.setState({\n          'forecast': result\n        }); // grab solar predictions based on forecast\n\n        const params = [];\n        result.forEach(day => {\n          params.push(make_params(this.getAvg(\"temp\", day), temp_hum_to_dew(f_to_c(this.getAvg(\"temp\", day)), this.getAvg(\"humidity\", day)), this.getAvg(\"humidity\", day), day['precipitation_accumulation'].value, this.getAvg(\"baro_pressure\", day), this.getAvg(\"wind_speed\", day), this.getAvg(\"visibility\", day), day['weather_code'].value));\n        });\n        /* make api call\n        fetch('/users', {\n            body: `json_args=${encodeURIComponent(JSON.stringify(params))}`,\n            headers: {\n                'content-type': 'application/x-www-form-urlencoded'\n            },\n            method: \"POST\"\n        })\n            .then(prediction => {\n                console.log((prediction));\n                this.setState({'solar_prediction': prediction});\n            })\n            .catch(error => {\n                console.error('There was an error!', error);\n            });\n          */\n\n        fetch('/users').then(res => res.json()).then(); //set data points\n\n        const dataPoints = this.state.solar_prediction.map((value, i) => ({\n          x: i,\n          y: parseFloat(value.toFixed(1))\n        }));\n        const stateCopy = this.state.options;\n        stateCopy['data'][0]['dataPoints'] = dataPoints;\n        this.setState({\n          'options': stateCopy\n        });\n        this.chart.render();\n      });\n    };\n\n    this.state = {\n      'marker': {\n        'hasLocation': false,\n        'latlng': {\n          'lat': 34,\n          'lng': -108\n        }\n      },\n      'forecast': [],\n      'solar_prediction': [],\n      'options': {\n        animationEnabled: true,\n        exportEnabled: true,\n        theme: \"light2\",\n        // \"light1\", \"dark1\", \"dark2\"\n        title: {\n          text: \"Daily Temperature\"\n        },\n        axisY: {\n          title: \"Temperature\",\n          includeZero: false,\n          suffix: \"°F\"\n        },\n        axisX: {\n          title: \"Date\",\n          interval: 1\n        },\n        data: [{\n          type: \"line\",\n          toolTipContent: \"Day {x}: {y}°F\",\n          dataPoints: []\n        }]\n      }\n    };\n  }\n\n  getAvg(key, obj) {\n    return (obj[key][0]['min'].value + obj[key][1]['max'].value) / 2;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vert-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"top-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MapContainer, {\n      onClick: e => this.handleClick(e),\n      marker: this.state.marker,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"forecast\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Forecast, {\n      forecast: this.state.forecast,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CanvasJSChart, {\n      options: this.state.options,\n      onRef: ref => this.chart = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default App;\n\nfunction f_to_c(t) {\n  return (t - 32) * (5 / 9);\n}\n\nfunction c_to_f(t) {\n  return t * (9 / 5) + 32;\n} // uses C degrees and percent\n\n\nfunction temp_hum_to_dew(temp, humidity) {\n  return Math.pow(humidity / 100, 0.125) * (112 + 0.9 * temp) + 0.1 * temp - 112;\n}\n\nfunction code_to_value(code, to_compare) {\n  if (code === to_compare) {\n    return 6;\n  } else {\n    return 0;\n  }\n}\n\nfunction make_params(temperature, dew_point, relative_humidity, daily_precipitation, station_pressure, wind_speed, hourly_visibility = 10, weather_code = 0) {\n  return {\n    'temperature': temperature,\n    'dew_point': dew_point,\n    'relative_humidity': relative_humidity,\n    'daily_precipitation': daily_precipitation,\n    'station_pressure': station_pressure,\n    'wind_speed': wind_speed,\n    'hourly_visibility': hourly_visibility,\n    'cloud_cover': 0,\n    'mostly_cloudy': code_to_value(weather_code, 'mostly_cloudy'),\n    'mostly_clear': code_to_value(weather_code, 'mostly_clear'),\n    'clear': code_to_value(weather_code, 'clear'),\n    'cloudy': code_to_value(weather_code, 'cloudy'),\n    'partly_cloudy': code_to_value(weather_code, 'partly_cloudy'),\n    'overcast': code_to_value(weather_code, 'overcast'),\n    'rain_light': code_to_value(weather_code, 'rain_light'),\n    'tstorm': code_to_value(weather_code, 'tstorm'),\n    'drizzle': code_to_value(weather_code, 'drizzle'),\n    'rain_heavy': code_to_value(weather_code, 'rain_heavy'),\n    'rain': code_to_value(weather_code, 'rain'),\n    'fog': code_to_value(weather_code, 'fog'),\n    'snow_light': code_to_value(weather_code, 'snow_light'),\n    'snow': code_to_value(weather_code, 'snow'),\n    'snow_heavy': code_to_value(weather_code, 'snow_heavy'),\n    'freezing_rain': code_to_value(weather_code, 'freezing_rain'),\n    'freezing_drizzle': code_to_value(weather_code, 'freezing_drizzle'),\n    'ice_pellets': code_to_value(weather_code, 'ice_pellets'),\n    'ice_pellets_light': code_to_value(weather_code, 'ice_pellets_light'),\n    'ice_pellets_heavy': code_to_value(weather_code, 'ice_pellets_heavy'),\n    'flurries': code_to_value(weather_code, 'flurries'),\n    'freezing_rain_heavy': code_to_value(weather_code, 'freezing_rain_heavy'),\n    'freezing_rain_light': code_to_value(weather_code, 'freezing_rain_light'),\n    'fog_light': code_to_value(weather_code, 'fog_light')\n  };\n}","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/TEST/client/src/App.js"],"names":["React","Component","Map","TileLayer","Marker","CanvasJSReact","CanvasJS","CanvasJSChart","require","config","Forecast","props","days","forecast","map","day","value","toFixed","MapContainer","marker","hasLocation","latlng","onClick","App","constructor","handleClick","e","setState","fetch","lat","lng","process","env","REACT_APP_API_KEY","then","res","json","result","params","forEach","push","make_params","getAvg","temp_hum_to_dew","f_to_c","dataPoints","state","solar_prediction","i","x","y","parseFloat","stateCopy","options","chart","render","animationEnabled","exportEnabled","theme","title","text","axisY","includeZero","suffix","axisX","interval","data","type","toolTipContent","key","obj","ref","t","c_to_f","temp","humidity","Math","pow","code_to_value","code","to_compare","temperature","dew_point","relative_humidity","daily_precipitation","station_pressure","wind_speed","hourly_visibility","weather_code"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { Component } from 'react';\nimport { Map, TileLayer, Marker } from  \"react-leaflet\";\nimport CanvasJSReact from './canvasjs.react';\n\nconst CanvasJS = CanvasJSReact.CanvasJS;\nconst CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nrequire('dotenv').config();\n\nfunction Forecast(props) {\n    const days = props.forecast.map(day => (\n        <tr key={day['observation_time'].value}>\n            <td>{day['observation_time'].value}</td>\n            <td>{((day['temp'][0]['min'].value + day['temp'][1]['max'].value) / 2).toFixed(1)}</td>\n            <td>{day['weather_code'].value}</td>\n        </tr>\n    ))\n\n    return (\n        <table id=\"forecastTable\">\n            <thead>\n                <tr>\n                  <th>Day</th>\n                  <th>Temperature</th>\n                  <th>Forecast</th>\n                </tr>\n            </thead>\n            <tbody>{days}</tbody>\n        </table>\n    );\n}\n\nfunction MapContainer (props) {\n    const marker = props.marker.hasLocation ? (\n        <Marker position={props.marker.latlng}/>\n    ) : null\n\n    return (\n        <Map\n            center={[34,-108]}\n            zoom={6}\n            onClick={props.onClick}\n            className='leaflet-container'\n        >\n            <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            />\n            {marker}\n        </Map>\n    );\n}\n\nclass App extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            'marker': {\n                'hasLocation': false,\n                'latlng': {\n                    'lat': 34,\n                    'lng': -108,\n                }\n            },\n            'forecast': [],\n            'solar_prediction': [],\n            'options': {\n                animationEnabled: true,\n                exportEnabled: true,\n                theme: \"light2\", // \"light1\", \"dark1\", \"dark2\"\n                title:{\n                    text: \"Daily Temperature\"\n                },\n                axisY: {\n                    title: \"Temperature\",\n                    includeZero: false,\n                    suffix: \"°F\"\n                },\n                axisX: {\n                    title: \"Date\",\n                    interval: 1\n                },\n                data: [{\n                    type: \"line\",\n                    toolTipContent: \"Day {x}: {y}°F\",\n                    dataPoints: []\n                }]\n            }\n        };\n\n    }\n\n    getAvg(key, obj) { return ((obj[key][0]['min'].value + obj[key][1]['max'].value) / 2) }\n\n    handleClick = (e) => {\n        this.setState({'marker': {\n                hasLocation: true,\n                latlng: e.latlng\n            }\n        });\n\n        // get weather forecast\n        fetch(\"https://api.climacell.co/v3/weather/forecast/daily?lat=\" + e.latlng.lat + \"&lon=\" + e.latlng.lng + \"&unit_system=us&start_time=now&fields=precipitation%2Cprecipitation_accumulation%2Ctemp%2Cwind_speed%2Cbaro_pressure%2Cvisibility%2Chumidity%2Cweather_code&apikey=\" + process.env.REACT_APP_API_KEY)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    // set forecast state\n                    this.setState({'forecast': result});\n\n                    // grab solar predictions based on forecast\n                    const params = [];\n                    result.forEach(day => {\n                        params.push(make_params(\n                            this.getAvg(\"temp\", day),\n                            temp_hum_to_dew(f_to_c(this.getAvg(\"temp\", day)), this.getAvg(\"humidity\", day)),\n                            this.getAvg(\"humidity\", day),\n                            day['precipitation_accumulation'].value,\n                            this.getAvg(\"baro_pressure\", day),\n                            this.getAvg(\"wind_speed\", day),\n                            this.getAvg(\"visibility\", day),\n                            day['weather_code'].value))\n                    })\n\n                    /* make api call\n                    fetch('/users', {\n                        body: `json_args=${encodeURIComponent(JSON.stringify(params))}`,\n                        headers: {\n                            'content-type': 'application/x-www-form-urlencoded'\n                        },\n                        method: \"POST\"\n                    })\n                        .then(prediction => {\n                            console.log((prediction));\n                            this.setState({'solar_prediction': prediction});\n                        })\n                        .catch(error => {\n                            console.error('There was an error!', error);\n                        });\n\n                     */\n\n                    fetch('/users').then(res => res.json()).then()\n\n                    //set data points\n                    const dataPoints = this.state.solar_prediction.map((value, i) => (\n                        {\n                            x: i,\n                            y:  parseFloat(value.toFixed(1))\n                        }\n                    ));\n                    const stateCopy = this.state.options;\n                    stateCopy['data'][0]['dataPoints'] = dataPoints;\n                    this.setState({'options': stateCopy});\n                    this.chart.render();\n\n\n                })\n    }\n\n\n    render() {\n        return (\n            <div className=\"vert-container\">\n                <div className=\"top-container\">\n                        <div className=\"map\">\n                            <MapContainer\n                                onClick={e => this.handleClick(e)}\n                                marker={this.state.marker}\n                            />\n                        </div>\n                        <div className=\"forecast\">\n                            <Forecast\n                                forecast={this.state.forecast}\n                            />\n                        </div>\n                </div>\n                <div className=\"chart\">\n                    <CanvasJSChart options={this.state.options} onRef={ref => this.chart = ref}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\nfunction f_to_c(t) {\n    return (t - 32) * (5/9);\n}\n\nfunction c_to_f(t) {\n    return (t * (9/5)) + 32;\n}\n\n// uses C degrees and percent\nfunction temp_hum_to_dew(temp, humidity) {\n    return (Math.pow((humidity/100), 0.125) * (112 + (0.9 * temp)))\n        + (0.1 * temp)\n        - 112;\n}\n\nfunction code_to_value(code, to_compare) {\n    if(code === to_compare) {\n        return 6;\n    }\n    else {\n        return 0;\n    }\n}\n\nfunction make_params(temperature, dew_point, relative_humidity, daily_precipitation,\n    station_pressure, wind_speed, hourly_visibility=10, weather_code=0) {\n\n    return {\n        'temperature': temperature,\n        'dew_point': dew_point,\n        'relative_humidity': relative_humidity,\n        'daily_precipitation': daily_precipitation,\n        'station_pressure': station_pressure,\n        'wind_speed': wind_speed,\n        'hourly_visibility': hourly_visibility,\n        'cloud_cover': 0,\n        'mostly_cloudy': code_to_value(weather_code, 'mostly_cloudy'),\n        'mostly_clear': code_to_value(weather_code, 'mostly_clear'),\n        'clear': code_to_value(weather_code, 'clear'),\n        'cloudy': code_to_value(weather_code, 'cloudy'),\n        'partly_cloudy': code_to_value(weather_code, 'partly_cloudy'),\n        'overcast': code_to_value(weather_code, 'overcast'),\n        'rain_light': code_to_value(weather_code, 'rain_light'),\n        'tstorm': code_to_value(weather_code, 'tstorm'),\n        'drizzle': code_to_value(weather_code, 'drizzle'),\n        'rain_heavy': code_to_value(weather_code, 'rain_heavy'),\n        'rain': code_to_value(weather_code, 'rain'),\n        'fog': code_to_value(weather_code, 'fog'),\n        'snow_light': code_to_value(weather_code, 'snow_light'),\n        'snow': code_to_value(weather_code, 'snow'),\n        'snow_heavy': code_to_value(weather_code, 'snow_heavy'),\n        'freezing_rain': code_to_value(weather_code, 'freezing_rain'),\n        'freezing_drizzle': code_to_value(weather_code, 'freezing_drizzle'),\n        'ice_pellets': code_to_value(weather_code, 'ice_pellets'),\n        'ice_pellets_light': code_to_value(weather_code, 'ice_pellets_light'),\n        'ice_pellets_heavy': code_to_value(weather_code, 'ice_pellets_heavy'),\n        'flurries': code_to_value(weather_code, 'flurries'),\n        'freezing_rain_heavy': code_to_value(weather_code, 'freezing_rain_heavy'),\n        'freezing_rain_light': code_to_value(weather_code, 'freezing_rain_light'),\n        'fog_light': code_to_value(weather_code, 'fog_light')\n    }\n}\n"]},"metadata":{},"sourceType":"module"}